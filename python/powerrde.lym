<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Run PowerRDE/DRC</description>
 <version>0.1</version>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name>Polyteda - PowerRDE</group-name>
 <menu-path>end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>#
# Copyright (c) 2018-2021 POLYTEDA CLOUD LLC. All rights reserved.
#
# This computer code is protected by International Copyright Laws, and may not
# be copied, reprinted, published, or otherwise distributed by any means without
# explicit permission from POLYTEDA CLOUD LLC. Any unauthorized use,
# duplication or disclosure is prohibited by law and will result in prosecution.
#
# Code for integration of KLayout and PoweRDE
#
# version 0.2
#
# Usage: run PoweRDE from menu "Polyteda"
#
# Written by: Yaroslav Kornachevskyi

import os
import re
import sys
import struct
import atexit
from functools import partial

class Marker:
    def __init__(self):
        self.cell = ""
        self.points = []
        self.r = 0
        self.g = 0
        self.b = 0        
    

class HighlightItem:
    def __init__(self):
        self.drc_mode_item = True
        self.lines_list = []
        self.kl_markers_list = []        

    def reset(self):
        self.lines_list = []

    def accumulate(self, line):
        self.lines_list.append(line)

    def get_color(self, r, g, b):
        # convert color array to value, i.e. [255,0,0] to 0xFF0000
        return int('%02x%02x%02x' % (r, g, b), 16)

    def is_float(self, value):
        return re.match(r"[-+]?\d+(\.0*)?$", value) is not None
    
    def parse(self):
        view = pya.Application.instance().main_window().current_view()
        if view is None:
            return

        # 2.7 self.kl_markers_list.clear()
        del self.kl_markers_list[:]

        self.xmin = self.ymin = sys.float_info.max
        self.xmax = self.ymax = -sys.float_info.max
        zoom = 1.0

        parsed = False
        cell_name = ""
        layout = view.active_cellview().layout()
        if self.drc_mode_item:
            for line in self.lines_list:
                #print(line)
                line_items = line.split()
                marker = Marker()
                cell_name = marker.cell = line_items[1]

                if self.is_float(line_items[3]):
                    zoom = float(line_items[3])
                else:
                    print("incorrect line in parse(): ", line)
                    continue
                
                marker.r, marker.g, marker.b = int(line_items[5]), int(line_items[6]), int(line_items[7])
                #marker.points = line_items[8:len(line_items)-1]
                #marker.points = [item for index, item in enumerate(marker.points) if index % 3 != 0]
                points = [float(item) for index, item in enumerate(line_items[8:len(line_items)-1]) if index % 3 != 0]
                marker.points = [[x, y] for x, y in zip(points[::2], points[1::2])]

                self.add_marker(view, marker)
                parsed = True
                # end of parsing drc
        else:
            marker = Marker()
            device_mode = True
            zoom = 1.
            for line in self.lines_list:
                if device_mode: # search for commands
                    if line.startswith("layout"):
                        substrings = line.split()
                        if substrings[1] == "scale":
                            zoom = float(substrings[2])
                        else:
                            print("Parsing error: looking for &lt;scale&gt;, got &lt;", substrings[1], "&gt;")
                            return
                        if substrings[3] == "hilite":
                            marker.r, marker.g, marker.b = int(substrings[4]),int(substrings[5]),int(substrings[6])
                        else:
                            print("Parsing error: looking for &lt;hilite&gt;, got &lt;", substrings[3], "&gt;")
                            return
                        if substrings[8] == "cell":
                           cell_name = substrings[9]
                        else:
                            print("Parsing error: looking for &lt;cell&gt;, got &lt;", substrings[8], "&gt;")
                            return
                        if len(substrings) == 10: # net command
                            device_mode = False
                            continue
                        elif substrings[10] == "device":
                            # fill marker data
                            points = [float(re.sub('^[(]|[)]$', '', value)) for value in substrings[11:]]
                            marker.points = [[x, y] for x, y in zip(points[::2], points[1::2])]
                            self.add_marker(view, marker)
                            parsed = True
                            break
                        else:
                            print("Warning: parsing error: looking for &lt;device&gt;, got &lt;", substrings[10], "&gt;")
                            return
                else: # accumulate net data
                    if line  == "net":
                        continue
                    else:
                        # parse (0.346 0.139)(0.346 1.139)(1.346 1.139)(1.346 0.139)
                        marker.points = [[float(val) for val in pair.split()] for pair in line[1:-1].split(")(")]
                        self.add_marker(view, marker)
                        # 2.7 marker.points.clear()
                        del marker.points[:]
                        parsed = True
                
        cell_idx = layout.cell_by_name(cell_name)
        view.select_cell(cell_idx, view.active_cellview_index())
            
        if parsed is True:
            xc = (self.xmax + self.xmin)/2.
            yc = (self.ymax + self.ymin)/2.
            xw = (self.xmax - self.xmin)*50./zoom
            yw = (self.ymax - self.ymin)*50./zoom
            zoom_rect = pya.DBox(xc-xw, yc-yw, xc+xw, yc+yw)
            zoom_rect = zoom_rect
            view.zoom_box(zoom_rect)
        # end of parse(self)

    def add_marker(self, view, marker):
        kl_marker = pya.Marker(view)
        kl_marker.color = self.get_color(marker.r, marker.g, marker.b)
        kl_marker.line_width = 2
        hull = []
        for x, y in marker.points:
            self.xmax = x if x &gt; self.xmax else self.xmax
            self.xmin = x if x &lt; self.xmin else self.xmin
            self.ymax = y if y &gt; self.ymax else self.ymax
            self.ymin = y if y &lt; self.ymin else self.ymin
            point = pya.DPoint(x, y)
            hull.append(point)
            kl_marker.set(pya.DPolygon(hull))
            self.kl_markers_list.append(kl_marker)

    def get_lines_list(self):
        return self.lines_list

    def clear_markers(self):
        # 2.7 self.kl_markers_list.clear()
        del self.kl_markers_list[:]
    
    def set_drc_mode_item(self, mode):
        self.drc_mode_item = mode
    
    def get_central_point(self):
        #layout = view.active_cellview().layout()
        #cell_idx = layout.cell_by_name(cell_name)
        #view.select_cell(cell_idx, view.active_cellview_index())
        #cell = layout.cell(cell_idx)
        #print("number_pairs_list = ", number_pairs_list)
        #x1 = number_pairs_list[0].split()[0]
        #x2 = number_pairs_list[2].split()[0]
        #y1 = number_pairs_list[0].split()[1]
        #y2 = number_pairs_list[2].split()[1]
        #xc = (x1+x2)/2
        #yc = (y1+y2)/2
        #cw = cell.dbbox().width()
        #ch =  cell.dbbox().height()
        #marker.points = [xc-0.5, yc-0.5,....]
        pass
        
        
class PowerRDEConfig(pya.QObject):
    def __init__(self):
        if os.name == 'nt':
            self.rde_binary = "powerrde.exe"
        else:
            self.rde_binary = "powerrde"


class TestConfig(pya.QObject):
    def __init__(self):
        self.working_dir = ""
        self.rde_file_name = ""


class PipeReader(pya.QObject):
    def __init__(self, finished_handler, rde_config, test_config, run_parameters, parent = None):
        super(PipeReader, self).__init__(parent)
        self.status = True

        # 2.7 import shutil
        # 2.7 shutil.which(name)
        def which(name):
            path=os.getenv('PATH')
            for p in path.split(os.path.pathsep):
                p=os.path.join(p, name)
                if os.path.exists(p) and os.access(p,os.X_OK):
                    return p
        
        if which(rde_config.rde_binary) is None:
            pya.MessageBox.critical("Error","PowerRDE is not installed in the $PATH environment variable", pya.MessageBox.Ok)
            self.status = False
        else:
            self.finished_handler = finished_handler
            self.highlight_item = HighlightItem()
            self.process = pya.QProcess(self)
            self.process.finished = self.on_finished
            self.process.readyRead = self.on_ready_read
            self.process.setWorkingDirectory(test_config.working_dir)
            self.process.start(rde_config.rde_binary, run_parameters+[test_config.rde_file_name])

    def on_ready_read(self):
        result = self.process.readAllStandardOutput().strip()
        for line in result.splitlines():
            self.parse_ouput(line.strip())

    def parse_ouput(self, line):
        if line == "show_end":
            self.highlight_item.set_drc_mode_item(True)
            self.highlight_item.parse()
            self.highlight_item.reset()
        elif line == "endlayout":
            self.run_lvs_parse()
        elif line.endswith("endlayout"):
            self.highlight_item.accumulate(line.rsplit(' ', 1)[0]) # cut last word
            self.run_lvs_parse()
        elif line.startswith("schematic"):
            return
        else:
            if not line.startswith("PowerRDE") and not line.startswith("WARNING:"):
                self.highlight_item.accumulate(line)
            else:
                print("incorrect line in parse_ouput(): ", line)

    def run_lvs_parse(self):
        self.highlight_item.set_drc_mode_item(False)
        self.highlight_item.parse()
        self.highlight_item.reset()

    def on_finished(self):
        self.highlight_item.clear_markers()        
        self.finished_handler()
        self.deleteLater()
        
    def get_status(self):
        return self.status

    def clear_highlight(self):
        self.highlight_item.clear_markers()

    def stop(self):
        #self.process.close()
        pass
        
    def __del__(self):
        print("deleteing")
        self.process.close()

class PowerRDERunner(pya.QObject):
    def __init__(self, parent = None):
        super(PowerRDERunner, self).__init__(parent)
        self.parent = parent
        self.rde_is_running = False
        self.mw = pya.Application.instance().main_window()
        self.mw.on_current_view_changed = self.on_current_view_changed
        self.mw.on_view_closed = self.on_view_closed
        self.menu = self.mw.menu()
        self.menu.insert_menu( "macros_menu", "polyteda", "Polyteda" )

        self.actions = []
        self.menu_items = []
        self.add_menu_item("Configure DRC...", "configure_drc", partial(self.run_powerdrc, parameters=["-klayout", "-task", "drc"]))
        self.add_menu_item("View DRC results...", "view_drc", partial(self.run_powerdrc, parameters=["-klayout", "-task", "drcdebug"]))
        self.add_menu_item("Configure LVS...", "configure_lvs", partial(self.run_powerdrc, parameters=["-klayout", "-task", "lvs"]))
        self.add_menu_item("View LVS results...", "view_lvs", partial(self.run_powerdrc, parameters=["-klayout", "-task", "lvsdebug"]))
        self.add_menu_item("Clear highlights", "clear_highlight", self.clear_highlight)

        self.on_current_view_changed()
        self.rde_config = PowerRDEConfig()

    def add_menu_item(self, title, id, slot):
        action = pya.Action()
        action.title = title
        action.on_triggered(slot)
        self.menu.insert_item( "polyteda.end", id, action)
        self.actions.append(action)
        self.menu_items.append(id)

    def on_current_view_changed(self):
        self.view = self.mw.current_view()
        menu_state = (self.view is not None) and (self.rde_is_running is False)
        for id in self.menu_items:
            if id == "clear_highlight":
                self.menu.action("polyteda." + id).enabled =self.view is not None
            else:
                self.menu.action("polyteda." + id).enabled =menu_state
                
    def on_view_closed(self, index):
        print("index = ", index)
        print("active ndex = ", pya.Application.instance().main_window().current_view().active_cellview_index())
        if self.rde_is_running and (index == pya.Application.instance().main_window().current_view().active_cellview_index()):
            self.pipe_reader.stop()

    def create_rcf_file(self, test_config):
        view = pya.Application.instance().main_window().current_view()

        if view is None:
            return False

        cell_name = view.active_cellview().cell.name
        gds_file_name = view.active_cellview().filename() # gds location
        #run_dir = test_config.working_dir
        run_dir = os.path.dirname(gds_file_name)
        test_config.working_dir = run_dir
        rde_file_name = os.path.join(run_dir, cell_name + '.rde')
        drc_run_dir = run_dir
        drc_rcf_file_name = os.path.join(drc_run_dir, cell_name + '_drc.rcf')
        lvs_rcf_file_name = os.path.join(drc_run_dir, cell_name + '_lvs.rcf')
        spice_out_file_name = os.path.join(drc_run_dir, cell_name + '.spo')
        gds_output_file_name = os.path.join(drc_run_dir, cell_name + '_output.gds')
        test_config.rde_file_name = rde_file_name

        # rde rcf
        if not os.path.isfile(rde_file_name):
            with open(rde_file_name, 'w') as outfp:
                outfp.write('DrcRcf: "' + drc_rcf_file_name +'";\n')
                outfp.write('LvsRcf: "' + lvs_rcf_file_name +'";\n')
                outfp.write('CellNameKL: "' + cell_name  +'";\n')
                outfp.write('LayoutFormat: "GDS";\n')
                outfp.write('RunDirectory: "' + drc_run_dir + '";\n')
                outfp.write('RDESpecWorkDir: "' + run_dir  + '";\n')

        #if not os.path.exists(drc_run_dir):
        #    os.makedirs(drc_run_dir)
            
        # drc rcf
        if not os.path.isfile(drc_rcf_file_name):
            with open(drc_rcf_file_name, 'w') as outfp:
                outfp.write('Layout: "' + gds_file_name +'";\n')
                outfp.write('TopCell: "' + cell_name  +'";\n')
                outfp.write('OutputFile: "' + gds_output_file_name + '";\n')
        
        # lvs rcf
        if not os.path.isfile(lvs_rcf_file_name):
            with open(lvs_rcf_file_name, 'w') as outfp:
                outfp.write('Layout: "' + gds_file_name +'";\n')
                outfp.write('TopCell: "' + cell_name  +'";\n')
                outfp.write('OutputFile: "' + gds_output_file_name + '";\n')
                outfp.write('RunName: "' + cell_name  +'";\n')
                outfp.write('input_format: "gds";\n')
                outfp.write('ConnectNetByName: "no";\n')
                outfp.write('CreateTextNetReport: "no";\n')
                outfp.write('ErrorNumberLimit: 1000;\n')
                outfp.write('ExtractionBinOutput: "yes";\n')
                outfp.write('ExtractionCellsLog: "no";\n')
                outfp.write('ExtractionLogEmptyRules: "no";\n')
                outfp.write('ExtractionMapOutput: "yes";\n')
                outfp.write('ExtractionMode: "hier";\n')
                outfp.write('ExtractionNetsLog: "no";\n')
                outfp.write('ExtractionRunNVN: "yes";\n')
                outfp.write('ExtractionSkipFlatDevices: "no";\n')
                outfp.write('ExtractionSpiceCoordinatesOutput: "yes";\n')
                outfp.write('ExtractionSpiceFileName: "' + spice_out_file_name + '";\n')
                outfp.write('ExtractionSpiceOutput: "yes";\n')
                outfp.write('ExtractionSplitMapOutput: "yes";\n')
                outfp.write('ExtractionWrapText: "no";\n')

        return True

    def clear_highlight(self):
        self.pipe_reader.clear_highlight()
        
    def run_powerdrc(self, parameters):
        test_config = TestConfig()
        test_config.working_dir = os.getcwd()
        if self.create_rcf_file(test_config) is False:
            return

        self.pipe_reader = PipeReader(self.finished_handler, self.rde_config, test_config, parameters, self.parent)
        self.rde_is_running = self.pipe_reader.get_status()
        #print("status = ", self.rde_is_running)
        self.on_current_view_changed() # set menu state

    def finished_handler(self):
        self.rde_is_running = False
        self.on_current_view_changed() # set menu state


def exit_handler():
    #print("in stop")
    pass

PowerRDERunner(pya.QApplication.instance())
</text>
</klayout-macro>
